
Atmega16_coloredLEDsensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000366  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00000366  000003da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000040a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  0000043a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000091a  00000000  00000000  0000049a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000251  00000000  00000000  00000db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000028d  00000000  00000000  00001005  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e8  00000000  00000000  00001294  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002d0  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001f7  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  00001843  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
  7a:	0c 94 b1 01 	jmp	0x362	; 0x362 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <wrcomm>:
	}
	return 1;
}
int wrcomm(void)
{
	commport_pwm &= ~(1 << rs);		//selecting command register
  82:	90 98       	cbi	0x12, 0	; 18
	commport_pwm &= ~(1 << wr);		//selecting write mode
  84:	91 98       	cbi	0x12, 1	; 18
	commport_pwm |= 1 << en;		//EN = 1 
  86:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	83 ef       	ldi	r24, 0xF3	; 243
  8a:	91 e0       	ldi	r25, 0x01	; 1
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <wrcomm+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <wrcomm+0x10>
  92:	00 00       	nop
	_delay_ms(2);
	commport_pwm &= ~(1 << en);		//EN = 0
  94:	92 98       	cbi	0x12, 2	; 18
  96:	83 ec       	ldi	r24, 0xC3	; 195
  98:	99 e0       	ldi	r25, 0x09	; 9
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <wrcomm+0x18>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <wrcomm+0x1e>
  a0:	00 00       	nop
	_delay_ms(10);
	return 1;
}
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	08 95       	ret

000000a8 <LCD_Init>:
  a8:	85 ea       	ldi	r24, 0xA5	; 165
  aa:	9e e0       	ldi	r25, 0x0E	; 14
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <LCD_Init+0x4>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCD_Init+0xa>
  b2:	00 00       	nop
int LCD_Init(void)
{
	_delay_ms(15);
	
	//Function set
	dataport = 0x38;	//0b00111000, DL = "HIGH", 8-bit mode; N = "high", 2-line display; F=0, 5x8 display
  b4:	88 e3       	ldi	r24, 0x38	; 56
  b6:	88 bb       	out	0x18, r24	; 24
	wrcomm(); 
  b8:	0e 94 41 00 	call	0x82	; 0x82 <wrcomm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	90 e1       	ldi	r25, 0x10	; 16
  be:	9a 95       	dec	r25
  c0:	f1 f7       	brne	.-4      	; 0xbe <LCD_Init+0x16>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <LCD_Init+0x1c>
	_delay_us(50);
	
	//clear LCD screen
	dataport = 0x01;	//clear screen
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	88 bb       	out	0x18, r24	; 24
	wrcomm();
  c8:	0e 94 41 00 	call	0x82	; 0x82 <wrcomm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	83 ef       	ldi	r24, 0xF3	; 243
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <LCD_Init+0x28>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCD_Init+0x2e>
  d6:	00 00       	nop
	_delay_ms(2);
	
	//display on/off control
	dataport = 0x0e;	//0b00001110, D=1, display is turned on; C=1, cursor is turned on; B=0, blink is off
  d8:	8e e0       	ldi	r24, 0x0E	; 14
  da:	88 bb       	out	0x18, r24	; 24
	wrcomm();
  dc:	0e 94 41 00 	call	0x82	; 0x82 <wrcomm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	90 e1       	ldi	r25, 0x10	; 16
  e2:	9a 95       	dec	r25
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCD_Init+0x3a>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCD_Init+0x40>
	_delay_us(50);
	//cursor at line 1
	dataport = 0x80;
  e8:	80 e8       	ldi	r24, 0x80	; 128
  ea:	88 bb       	out	0x18, r24	; 24
	wrcomm();
  ec:	0e 94 41 00 	call	0x82	; 0x82 <wrcomm>
  f0:	80 e1       	ldi	r24, 0x10	; 16
  f2:	8a 95       	dec	r24
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_Init+0x4a>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <LCD_Init+0x50>
	_delay_us(50);
	//entry mode set
	
	//cursor or display shift
	dataport = 0x1C;	//0b00011100, S/C=1, R/L=1, shift all the display to the right, cursor moves according to the display
  f8:	8c e1       	ldi	r24, 0x1C	; 28
  fa:	88 bb       	out	0x18, r24	; 24
	wrcomm();
  fc:	0e 94 41 00 	call	0x82	; 0x82 <wrcomm>
 100:	90 e1       	ldi	r25, 0x10	; 16
 102:	9a 95       	dec	r25
 104:	f1 f7       	brne	.-4      	; 0x102 <LCD_Init+0x5a>
 106:	00 c0       	rjmp	.+0      	; 0x108 <LCD_Init+0x60>
	_delay_us(50);
	
	return 1;
	
}
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	08 95       	ret

0000010e <wrdata>:
	_delay_ms(10);
	return 1;
}
int wrdata(void)
{
	commport_pwm |= 1 << rs;		//selecting data register
 10e:	90 9a       	sbi	0x12, 0	; 18
	commport_pwm &= ~(1 << wr);		//selecting write mode
 110:	91 98       	cbi	0x12, 1	; 18
	commport_pwm |= 1 << en;		//EN = 1
 112:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	83 ef       	ldi	r24, 0xF3	; 243
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <wrdata+0xa>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <wrdata+0x10>
 11e:	00 00       	nop
	_delay_ms(2);
	commport_pwm &= ~(1 << en);		//EN = 0
 120:	92 98       	cbi	0x12, 2	; 18
 122:	87 ea       	ldi	r24, 0xA7	; 167
 124:	91 e6       	ldi	r25, 0x61	; 97
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <wrdata+0x18>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <wrdata+0x1e>
 12c:	00 00       	nop
	_delay_ms(100);
	return 1;
}
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	08 95       	ret

00000134 <LCD_SendData>:
	return 1;
	
}

int LCD_SendData(unsigned char *s)
{
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	8c 01       	movw	r16, r24
 142:	7c 01       	movw	r14, r24
	unsigned char *j = s;
	int i;
	for (i = 0; i < strlen(j); i++)
 144:	c0 e0       	ldi	r28, 0x00	; 0
 146:	d0 e0       	ldi	r29, 0x00	; 0
 148:	07 c0       	rjmp	.+14     	; 0x158 <LCD_SendData+0x24>
	{
		dataport = j[i];
 14a:	f7 01       	movw	r30, r14
 14c:	81 91       	ld	r24, Z+
 14e:	7f 01       	movw	r14, r30
 150:	88 bb       	out	0x18, r24	; 24
		wrdata();
 152:	0e 94 87 00 	call	0x10e	; 0x10e <wrdata>

int LCD_SendData(unsigned char *s)
{
	unsigned char *j = s;
	int i;
	for (i = 0; i < strlen(j); i++)
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	f8 01       	movw	r30, r16
 15a:	01 90       	ld	r0, Z+
 15c:	00 20       	and	r0, r0
 15e:	e9 f7       	brne	.-6      	; 0x15a <LCD_SendData+0x26>
 160:	31 97       	sbiw	r30, 0x01	; 1
 162:	e0 1b       	sub	r30, r16
 164:	f1 0b       	sbc	r31, r17
 166:	ce 17       	cp	r28, r30
 168:	df 07       	cpc	r29, r31
 16a:	78 f3       	brcs	.-34     	; 0x14a <LCD_SendData+0x16>
	{
		dataport = j[i];
		wrdata();
	}
	return 1;
}
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	ef 90       	pop	r14
 17c:	08 95       	ret

0000017e <InitPWM>:
/*                    Pulse Width Modulation                            */
/************************************************************************/
int InitPWM()
{
	//initialize PWM for timer 1
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM10);	
 17e:	8f b5       	in	r24, 0x2f	; 47
 180:	81 6a       	ori	r24, 0xA1	; 161
 182:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << CS10) | (1 << WGM12);	//8-bit fast PWM, no pre-scaler
 184:	8e b5       	in	r24, 0x2e	; 46
 186:	89 60       	ori	r24, 0x09	; 9
 188:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << TOIE1);	//enable overflow
 18a:	89 b7       	in	r24, 0x39	; 57
 18c:	84 60       	ori	r24, 0x04	; 4
 18e:	89 bf       	out	0x39, r24	; 57
	
	//initialize PWM for timer 2
	TCCR2 |= (1 << COM21) | (1 << WGM20) | (1 << WGM21) | (1 << CS20);	//select fast PWM, no prescaler
 190:	85 b5       	in	r24, 0x25	; 37
 192:	89 66       	ori	r24, 0x69	; 105
 194:	85 bd       	out	0x25, r24	; 37
	return 0;
}
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	08 95       	ret

0000019c <ConfigPWM>:

int ConfigPWM()
{
	OCR2 = 0.7*255;			//blue
 19c:	82 eb       	ldi	r24, 0xB2	; 178
 19e:	83 bd       	out	0x23, r24	; 35
	bool flag_a = true;
	bool flag_b = true;

	uint8_t timer1A = 0xd0;	// green
	uint8_t timer1B = 0xc0;	// red
	OCR1A = timer1A;
 1a0:	80 ed       	ldi	r24, 0xD0	; 208
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	9b bd       	out	0x2b, r25	; 43
 1a6:	8a bd       	out	0x2a, r24	; 42
	OCR1B = timer1B;
 1a8:	80 ec       	ldi	r24, 0xC0	; 192
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	99 bd       	out	0x29, r25	; 41
 1ae:	88 bd       	out	0x28, r24	; 40
	{
		flag_b =false;
	}
	
	return 0;
}
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	08 95       	ret

000001b6 <InitADC>:
/************************************************************************/
/*					 Analog-Digital Conversion                          */
/************************************************************************/
int InitADC()
{
	ADMUX |= (1 << REFS0);	//select Vref=Avcc
 1b6:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1 << ADEN) | (1 <<ADPS2); //enable ADC, and set pre-scaler = 16
 1b8:	86 b1       	in	r24, 0x06	; 6
 1ba:	84 68       	ori	r24, 0x84	; 132
 1bc:	86 b9       	out	0x06, r24	; 6
	return 0;
}
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	08 95       	ret

000001c4 <readADC>:

uint16_t readADC(uint8_t channel)
{
	channel &= 0b00000111;	//AND 7 keeps the value of 'channel' between 0 and 7
	ADMUX |= (ADMUX & 0b11110000) | channel;	//clear the bottom 3 bits of ADMUX before OR
 1c4:	27 b1       	in	r18, 0x07	; 7
 1c6:	97 b1       	in	r25, 0x07	; 7
 1c8:	90 7f       	andi	r25, 0xF0	; 240
 1ca:	92 2b       	or	r25, r18
	return 0;
}

uint16_t readADC(uint8_t channel)
{
	channel &= 0b00000111;	//AND 7 keeps the value of 'channel' between 0 and 7
 1cc:	87 70       	andi	r24, 0x07	; 7
	ADMUX |= (ADMUX & 0b11110000) | channel;	//clear the bottom 3 bits of ADMUX before OR
 1ce:	98 2b       	or	r25, r24
 1d0:	97 b9       	out	0x07, r25	; 7
	//start single conversion
	ADCSRA |= (1 << ADSC);
 1d2:	36 9a       	sbi	0x06, 6	; 6
	
	//wait for the conversion to complete
	//thus, ADSC becomes '0' again
	while (ADCSRA & (1 << ADSC));
 1d4:	36 99       	sbic	0x06, 6	; 6
 1d6:	fe cf       	rjmp	.-4      	; 0x1d4 <readADC+0x10>
	return ADC;
 1d8:	84 b1       	in	r24, 0x04	; 4
 1da:	95 b1       	in	r25, 0x05	; 5
}
 1dc:	08 95       	ret

000001de <main>:

/************************************************************************/
/*							 Main Function                              */
/************************************************************************/
int main(void)
{
 1de:	ef 92       	push	r14
 1e0:	ff 92       	push	r15
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
 1ee:	a8 97       	sbiw	r28, 0x28	; 40
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	cd bf       	out	0x3d, r28	; 61
	//set port ddr
	DDRB = 0xFF;
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;	//set portD 4,5,6 as output pins
 1fe:	81 bb       	out	0x11, r24	; 17
	//DDRA = 0x00;
	
	//initialize LCD
	LCD_Init();
 200:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_Init>
	//initialize PWM
	InitPWM();
 204:	0e 94 bf 00 	call	0x17e	; 0x17e <InitPWM>
	//initialize ADC
	InitADC();
 208:	0e 94 db 00 	call	0x1b6	; 0x1b6 <InitADC>
	//set for PWM
	ConfigPWM();
 20c:	0e 94 ce 00 	call	0x19c	; 0x19c <ConfigPWM>
	uint8_t adcResult_total, adcResult_red, adcResult_green, adcResult_blue;
	//adcResult[0] = readADC(0);
	//adcResult[1] = readADC(1);
	//adcResult[2] = readADC(2);
	//adcResult[3] = readADC(3);
	adcResult_total = readADC(0);
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <readADC>
 216:	e8 2e       	mov	r14, r24
 218:	2f e3       	ldi	r18, 0x3F	; 63
 21a:	8d e0       	ldi	r24, 0x0D	; 13
 21c:	93 e0       	ldi	r25, 0x03	; 3
 21e:	21 50       	subi	r18, 0x01	; 1
 220:	80 40       	sbci	r24, 0x00	; 0
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <main+0x40>
 226:	00 c0       	rjmp	.+0      	; 0x228 <main+0x4a>
 228:	00 00       	nop
	_delay_ms(1000);
	adcResult_red = readADC(0x01);
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <readADC>
 230:	f8 2e       	mov	r15, r24
	adcResult_green = readADC(0x02);
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <readADC>
 238:	08 2f       	mov	r16, r24
	adcResult_blue = readADC(0x03);
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <readADC>
 240:	18 2f       	mov	r17, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 242:	4a e0       	ldi	r20, 0x0A	; 10
 244:	be 01       	movw	r22, r28
 246:	6f 5f       	subi	r22, 0xFF	; 255
 248:	7f 4f       	sbci	r23, 0xFF	; 255
 24a:	8e 2d       	mov	r24, r14
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__itoa_ncheck>
 252:	4a e0       	ldi	r20, 0x0A	; 10
 254:	be 01       	movw	r22, r28
 256:	65 5f       	subi	r22, 0xF5	; 245
 258:	7f 4f       	sbci	r23, 0xFF	; 255
 25a:	8f 2d       	mov	r24, r15
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__itoa_ncheck>
 262:	4a e0       	ldi	r20, 0x0A	; 10
 264:	be 01       	movw	r22, r28
 266:	6b 5e       	subi	r22, 0xEB	; 235
 268:	7f 4f       	sbci	r23, 0xFF	; 255
 26a:	80 2f       	mov	r24, r16
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__itoa_ncheck>
 272:	4a e0       	ldi	r20, 0x0A	; 10
 274:	be 01       	movw	r22, r28
 276:	61 5e       	subi	r22, 0xE1	; 225
 278:	7f 4f       	sbci	r23, 0xFF	; 255
 27a:	81 2f       	mov	r24, r17
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__itoa_ncheck>
	itoa(adcResult_total, total_buffer, 10);
	itoa(adcResult_red, red_buffer, 10);
	itoa(adcResult_green, green_buffer, 10);
	itoa(adcResult_blue, blue_buffer, 10);
	
	LCD_SendData("RGB=");
 282:	80 e6       	ldi	r24, 0x60	; 96
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_SendData>
	LCD_SendData(total_buffer);
 28a:	ce 01       	movw	r24, r28
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_SendData>
	LCD_SendData("             ");
 292:	85 e6       	ldi	r24, 0x65	; 101
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_SendData>
	LCD_SendData("R=");
 29a:	83 e7       	ldi	r24, 0x73	; 115
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_SendData>
	LCD_SendData(red_buffer);
 2a2:	ce 01       	movw	r24, r28
 2a4:	0b 96       	adiw	r24, 0x0b	; 11
 2a6:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_SendData>
	
	LCD_SendData(", G=");
 2aa:	86 e7       	ldi	r24, 0x76	; 118
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_SendData>
	LCD_SendData(green_buffer);
 2b2:	ce 01       	movw	r24, r28
 2b4:	45 96       	adiw	r24, 0x15	; 21
 2b6:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_SendData>
	
	LCD_SendData(", B=");
 2ba:	8b e7       	ldi	r24, 0x7B	; 123
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_SendData>
	LCD_SendData(blue_buffer);
 2c2:	ce 01       	movw	r24, r28
 2c4:	4f 96       	adiw	r24, 0x1f	; 31
 2c6:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_SendData>
	dataport = 0xC0;
 2ca:	80 ec       	ldi	r24, 0xC0	; 192
 2cc:	88 bb       	out	0x18, r24	; 24
	wrcomm();
 2ce:	0e 94 41 00 	call	0x82	; 0x82 <wrcomm>
	LCD_SendData("Composition is:");
 2d2:	80 e8       	ldi	r24, 0x80	; 128
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_SendData>
	
	return 1;
}
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	a8 96       	adiw	r28, 0x28	; 40
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	f8 94       	cli
 2e4:	de bf       	out	0x3e, r29	; 62
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	cd bf       	out	0x3d, r28	; 61
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	1f 91       	pop	r17
 2f0:	0f 91       	pop	r16
 2f2:	ff 90       	pop	r15
 2f4:	ef 90       	pop	r14
 2f6:	08 95       	ret

000002f8 <__itoa_ncheck>:
 2f8:	bb 27       	eor	r27, r27
 2fa:	4a 30       	cpi	r20, 0x0A	; 10
 2fc:	31 f4       	brne	.+12     	; 0x30a <__itoa_ncheck+0x12>
 2fe:	99 23       	and	r25, r25
 300:	22 f4       	brpl	.+8      	; 0x30a <__itoa_ncheck+0x12>
 302:	bd e2       	ldi	r27, 0x2D	; 45
 304:	90 95       	com	r25
 306:	81 95       	neg	r24
 308:	9f 4f       	sbci	r25, 0xFF	; 255
 30a:	0c 94 88 01 	jmp	0x310	; 0x310 <__utoa_common>

0000030e <__utoa_ncheck>:
 30e:	bb 27       	eor	r27, r27

00000310 <__utoa_common>:
 310:	fb 01       	movw	r30, r22
 312:	55 27       	eor	r21, r21
 314:	aa 27       	eor	r26, r26
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	aa 1f       	adc	r26, r26
 31c:	a4 17       	cp	r26, r20
 31e:	10 f0       	brcs	.+4      	; 0x324 <__utoa_common+0x14>
 320:	a4 1b       	sub	r26, r20
 322:	83 95       	inc	r24
 324:	50 51       	subi	r21, 0x10	; 16
 326:	b9 f7       	brne	.-18     	; 0x316 <__utoa_common+0x6>
 328:	a0 5d       	subi	r26, 0xD0	; 208
 32a:	aa 33       	cpi	r26, 0x3A	; 58
 32c:	08 f0       	brcs	.+2      	; 0x330 <__utoa_common+0x20>
 32e:	a9 5d       	subi	r26, 0xD9	; 217
 330:	a1 93       	st	Z+, r26
 332:	00 97       	sbiw	r24, 0x00	; 0
 334:	79 f7       	brne	.-34     	; 0x314 <__utoa_common+0x4>
 336:	b1 11       	cpse	r27, r1
 338:	b1 93       	st	Z+, r27
 33a:	11 92       	st	Z+, r1
 33c:	cb 01       	movw	r24, r22
 33e:	0c 94 a1 01 	jmp	0x342	; 0x342 <strrev>

00000342 <strrev>:
 342:	dc 01       	movw	r26, r24
 344:	fc 01       	movw	r30, r24
 346:	67 2f       	mov	r22, r23
 348:	71 91       	ld	r23, Z+
 34a:	77 23       	and	r23, r23
 34c:	e1 f7       	brne	.-8      	; 0x346 <strrev+0x4>
 34e:	32 97       	sbiw	r30, 0x02	; 2
 350:	04 c0       	rjmp	.+8      	; 0x35a <strrev+0x18>
 352:	7c 91       	ld	r23, X
 354:	6d 93       	st	X+, r22
 356:	70 83       	st	Z, r23
 358:	62 91       	ld	r22, -Z
 35a:	ae 17       	cp	r26, r30
 35c:	bf 07       	cpc	r27, r31
 35e:	c8 f3       	brcs	.-14     	; 0x352 <strrev+0x10>
 360:	08 95       	ret

00000362 <_exit>:
 362:	f8 94       	cli

00000364 <__stop_program>:
 364:	ff cf       	rjmp	.-2      	; 0x364 <__stop_program>
